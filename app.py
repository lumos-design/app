

import streamlit as st
import lightgbm as lgb
import numpy as np

# Load the AKD and CKD models
aki_model = lgb.Booster(model_file='aki_model.txt')
akd_model = lgb.Booster(model_file='akd_model.txt')
mortality_model = lgb.Booster(model_file='mortality_model.txt')

# 改成自己的分类指标
AKI_stage_mapping = {"Stage 0": 0, "Stage 1": 1, "Stage 2": 2, "Stage 3": 3}
Trajectory_mapping = {"NKD": 0, "AKI recovery": 1, "subacute AKD": 2, "AKD with AKI": 3}
Aspirin_mapping = {"NO": 0, "Yes": 1}
Cardiac_glycosides_mapping = {"NO": 0, "Yes": 1}
Chronic_kidney_disease_mapping = {"NO": 0, "Yes": 1}
Pneumonia_mapping = {"NO": 0, "Yes": 1}
Coronary_heart_disease_mapping = {"NO": 0, "Yes": 1}

def predict_aki_probability(features):
    aki_prob = aki_model.predict(features)
    return aki_prob[0]


def predict_akd_probability(features):
    akd_prob = akd_model.predict(features)
    return akd_prob[0]

def predict_mortality_probability(features):
    mortality_prob = mortality_model.predict(features)
    return mortality_prob[0]


def main():
    st.title('AKD, AKI and mortality Probability Prediction in malnourished patients')

    # 检查模型是否正确加载
    try:
        print("Mortality model loaded with", mortality_model.num_feature(), "features.")
    except Exception as e:
        print("Error loading mortality model:", e)
        st.error("Error loading mortality model. Please check the model file.")

# User selects which content to display 第一页介绍
    selected_content = st.radio("", ("Model Introduction", "AKD, AKI and mortality Prediction"))

    if selected_content == "Model Introduction":
        st.subheader("Model Introduction")
        st.write("The online application employs the LightGBM model to forecast the probability of acute kidney disease (AKD), acute kidney injury (AKI), and mortality in malnourished patients using patient metrics.")
        # Disclaimer
        st.subheader("Disclaimer")
        st.write("The predictions generated by this model are based on historical data and statistical patterns, and they may not be entirely accurate or applicable to every individual.")
        st.write("**For Patients:**")
        st.write("- The predictions presented by this platform are intended for informational purposes only and should not be regarded as a substitute for professional medical advice, diagnosis, or treatment.")
        st.write("- Consult with your healthcare provider for personalized medical guidance and decisions concerning your health.")
        st.write("**For Healthcare Professionals:**")
        st.write("- This platform should be considered as a supplementary tool to aid clinical decision-making and should not be the sole determinant of patient care.")
        st.write("- Clinical judgment and expertise should always take precedence in medical practice.")
        st.write("**For Researchers:**")
        st.write("- While this platform can serve as a valuable resource for research purposes, it is crucial to validate its predictions within your specific clinical context and patient population.")
        st.write("- Ensure that your research adheres to all ethical and regulatory standards.")
        st.write("The creators of this online platform and model disclaim any responsibility for decisions or actions taken based on the predictions provided herein. Please use this tool responsibly and always consider individual patient characteristics and clinical context when making medical decisions.")
        st.write("By utilizing this online platform, you agree to the terms and conditions outlined in this disclaimer.")

    elif selected_content == "AKD, AKI and mortality Prediction":
        st.subheader("AKD, AKI and mortality Prediction in malnourished patients")   #改成营养不良

    # User selects prediction type (AKD or AKI)
        prediction_type = st.radio("Select Prediction Type", ("AKD Prediction", "AKI Prediction", "mortality Prediction"))

    # Feature input
        features = []

        if prediction_type == "AKD Prediction":
            st.subheader("AKD Features")
 
 
            AKI_stage = st.selectbox("AKI stage", ["Stage 0", "Stage 1", "Stage 2", "Stage 3"], key="AKI_stage_AKD")
            LDH = st.number_input("LDH (U/L)", value=0.0, format="%.2f", key="LDH_AKD")
            Albumin = st.number_input("Albumin (g/L)", value=0.0, format="%.2f", key="Albumin_AKD")
            Aspirin = st.selectbox("Aspirin", ["NO", "Yes"], key="Aspirin_AKD")
            Scr = st.number_input("Scr (umol/L)", value=0.0, format="%.2f", key="Scr_AKD") 
            Thrombin_Time = st.number_input("Thrombin Time (s)", value=0.0, format="%.2f", key="Thrombin_Time_AKD") 
            Total_Bilirubin = st.number_input("Total Bilirubin (umol/L)", value=0.0, format="%.2f", key="Total_Bilirubin_AKD")
            RBC = st.number_input("RBC (10^12/L)", value=0.0, format="%.2f", key="RBC_AKD")
            GGT = st.number_input("GGT (U/L)", value=0.0, format="%.2f", key="GGT_AKD")
            Coronary_heart_disease = st.selectbox("Coronary heart disease", ["NO", "Yes"], key="CHD_AKD")
            Hemoglobin = st.number_input("Hemoglobin (g/L)", value=0.0, format="%.2f", key="Hemoglobin_AKD")
            Triglycerides = st.number_input("Triglycerides (mmol/L)", value=0.0, format="%.2f", key="Triglycerides_AKD")

        # Map AKIGrade back to 0, 1, 2, 3 for prediction
            AKI_stage_encoded = AKI_stage_mapping[AKI_stage]        #疑问  有可能报错
            Aspirin_encoded = Aspirin_mapping[Aspirin]
            Coronary_heart_disease_encoded = Coronary_heart_disease_mapping[Coronary_heart_disease]
            features.extend([AKI_stage_encoded, Scr, Hemoglobin, RBC, GGT, Total_Bilirubin,
            Triglycerides, LDH, Albumin, Thrombin_Time,Coronary_heart_disease_encoded, Aspirin_encoded])

            if st.button("Predict AKD Probability"):
                akd_prob = predict_akd_probability(np.array(features).reshape(1, -1))
                st.write(f"AKD Probability: {akd_prob:.2f}")

        elif prediction_type == "AKI Prediction":
            st.subheader("AKI Features")
 
            Coronary_heart_disease = st.selectbox("Coronary heart disease", ["NO", "Yes"], key="CHD_AKI")
            Glucose = st.number_input("Glucose (mmol/L)", value=0.0, format="%.2f", key="Glucose_AKI")
            Scr = st.number_input("Scr (umol/L)", value=0.0, format="%.2f", key="Scr_AKI")
            Total_Bilirubin = st.number_input("Total Bilirubin (umol/L)", value=0.0, format="%.2f", key="Total_Bilirubin_AKI")
            LDH = st.number_input("LDH (U/L)", value=0.0, format="%.2f", key="LDH_AKI")
            WBC = st.number_input("WBC (10^9/L)", value=0.0, format="%.2f", key="WBC_AKI")
            Aspirin = st.selectbox("Aspirin", ["NO", "Yes"], key="Aspirin_AKI")
            UA = st.number_input("UA (umol/L)", value=0.0, format="%.2f", key="UA_AKI")
            Platelets = st.number_input("Platelets (10^9/L)", value=0.0, format="%.2f", key="Platelets_AKI")
            Na = st.number_input("Na(mmol/L)", value=0.0, format="%.2f", key="Na_AKI")
            Pneumonia = st.selectbox("Pneumonia", ["NO", "Yes"], key="Pneumonia_AKI")
            Chronic_kidney_disease = st.selectbox("Chronic kidney disease", ["NO", "Yes"], key="CKD_AKI")  #有可能要改
            Total_protein = st.number_input("Total protein (g/L)", value=0.0, format="%.2f", key="Total_protein_AKI")
            LDL = st.number_input("LDL (mmol/L)", value=0.0, format="%.2f", key="LDL_AKI")
            Fibrinogen = st.number_input("Fibrinogen (g/L)", value=0.0, format="%.2f", key="Fibrinogen_AKI")


            Chronic_kidney_disease_encoded = Chronic_kidney_disease_mapping[Chronic_kidney_disease]        #改这里
            Aspirin_encoded = Aspirin_mapping[Aspirin]
            Coronary_heart_disease_encoded = Coronary_heart_disease_mapping[Coronary_heart_disease]
            Pneumonia_encoded = Pneumonia_mapping[Pneumonia]

            features.extend([Scr, Glucose, Na, Platelets, WBC, Total_Bilirubin,
             LDL, LDH, UA, Total_protein, Fibrinogen, Chronic_kidney_disease_encoded,Pneumonia_encoded, Coronary_heart_disease_encoded, Aspirin_encoded])


            if st.button("Predict AKI Probability"):
                aki_prob = predict_aki_probability(np.array(features).reshape(1, -1))
                st.write(f"AKI Probability: {aki_prob:.2f}")

        elif prediction_type == "mortality Prediction":
            st.subheader("mortality Features")


            Cardiac_glycosides = st.selectbox("Cardiac glycosides", ["NO", "Yes"], key="Cardiac_glycosides_mortality")
            Trajectory = st.selectbox("Trajectory", ["NKD", "AKI recovery", "subacute AKD", "AKD with AKI"], key="Trajectory_mortality")
            LDH = st.number_input("LDH (U/L)", value=0.0, format="%.2f", key="LDH_mortality")
            Albumin_Globulin_Ratio = st.number_input("Albumin Globulin Ratio", value=0.0, format="%.2f", key="Albumin_Globulin_Ratio_mortality")
            Albumin = st.number_input("Albumin (g/L)", value=0.0, format="%.2f", key="Albumin_mortality")
            WBC = st.number_input("WBC (10^9/L)", value=0.0, format="%.2f", key="WBC_mortality")
            Prothrombin_Time = st.number_input("Prothrombin Time (s)", value=0.0, format="%.2f", key="Thrombin_Time_mortality") 
            Na = st.number_input("Na (mmol/L)", value=0.0, format="%.2f", key="Na_mortality")
            Glucose = st.number_input("Glucose (mmol/L)", value=0.0, format="%.2f", key="Glucose_mortality")
            Platelets = st.number_input("Platelets (10^9/L)", value=0.0, format="%.2f", key="Platelets_mortality")
            NRS_2002_score = st.selectbox("NRS-2002 score", ["3", "4", "5", "6", "7"], key="NRS_2002_score_mortality")

            Cardiac_glycosides_encoded = Cardiac_glycosides_mapping[Cardiac_glycosides]
            Trajectory_encoded = Trajectory_mapping[Trajectory]

            features = [Trajectory_encoded, NRS_2002_score, Glucose, Na, Platelets,
                    WBC, LDH, Albumin, Albumin_Globulin_Ratio, Prothrombin_Time, Cardiac_glycosides_encoded]

            if st.button("Predict mortality Probability"):
                mortality_prob = predict_mortality_probability(np.array(features).reshape(1, -1))
                st.write(f"mortality Probability: {mortality_prob:.2f}")

if __name__ == "__main__":
    main()
